{"ast":null,"code":"// auction 전체 호출 (조건에 따라 필터링 호출)\n\nimport connectSupabase from \"./connectSupabase\";\n\n/**\n *\n * @param searchKeyword // 검색 키워드\n * @param categories // 카테고리\n * @param limit // 한번에 가져올 데이터 수\n * @param offset // 가져올 데이터 시작점\n * @param orderBy // 정렬 기준\n * @param order // 정렬 방식\n * @param user_id // 유저 아이디 (내가 쓴 글만 가져오기)\n */\nexport async function fetchGetAuctions(searchKeyword = \"\", categories, limit = 20, offset = 0, orderBy = \"created_at\", order = false, user_id = \"\") {\n  console.log(\"user_id\", user_id);\n  const query = connectSupabase.from(\"auction_post\").select(\"*, category(category_name), user_info(user_email)\").order(`${orderBy}`, {\n    ascending: order\n  });\n  searchKeyword.trim() !== \"\" && query.like(\"title\", `%${searchKeyword}%`).like(\"content\", `%${searchKeyword}%`);\n  user_id.trim() !== \"\" && query.eq(\"user_id\", user_id);\n  if (categories.length > 0) {\n    query.in(\"category_id\", categories);\n  }\n  const {\n    data,\n    error\n  } = await query.returns();\n  if (error) throw new Error(error.message);\n  return data;\n}\nexport const fetchGetCategories = async () => {\n  const {\n    data,\n    error\n  } = await connectSupabase.from(\"category\").select(\"*\");\n  if (error) throw new Error(error.message);\n  return data;\n};\n\n/**\n * auction_id로 auction 데이터 호출\n * @param auction_id\n */\nexport const fetchGetAuctionById = async auction_id => {\n  const {\n    data,\n    error\n  } = await connectSupabase.from(\"auction_post\").select(`\n      *, auction_images(image_id, image_path),\n      category(category_name)`).eq(\"auction_id\", auction_id).returns().single();\n  if (error) throw new Error(error.message);\n  return data;\n};","map":{"version":3,"names":["connectSupabase","fetchGetAuctions","searchKeyword","categories","limit","offset","orderBy","order","user_id","console","log","query","from","select","ascending","trim","like","eq","length","in","data","error","returns","Error","message","fetchGetCategories","fetchGetAuctionById","auction_id","single"],"sources":["/Users/eunbi/Desktop/project/auction-project/src/api/auction.ts"],"sourcesContent":["// auction 전체 호출 (조건에 따라 필터링 호출)\nimport { Auction_post, Category } from \"../types/databaseRetrunTypes\";\nimport connectSupabase from \"./connectSupabase\";\n\n/**\n *\n * @param searchKeyword // 검색 키워드\n * @param categories // 카테고리\n * @param limit // 한번에 가져올 데이터 수\n * @param offset // 가져올 데이터 시작점\n * @param orderBy // 정렬 기준\n * @param order // 정렬 방식\n * @param user_id // 유저 아이디 (내가 쓴 글만 가져오기)\n */\nexport async function fetchGetAuctions(\n  searchKeyword: string = \"\",\n  categories: Pick<Category, \"category_id\">[],\n  limit: number = 20,\n  offset: number = 0,\n  orderBy: string = \"created_at\",\n  order: boolean = false,\n  user_id: string = \"\"\n) {\n  console.log(\"user_id\", user_id);\n\n  const query = connectSupabase\n    .from(\"auction_post\")\n    .select(\"*, category(category_name), user_info(user_email)\")\n    .order(`${orderBy}`, { ascending: order });\n\n  searchKeyword.trim() !== \"\" &&\n    query\n      .like(\"title\", `%${searchKeyword}%`)\n      .like(\"content\", `%${searchKeyword}%`);\n\n  user_id.trim() !== \"\" && query.eq(\"user_id\", user_id);\n\n  if (categories.length > 0) {\n    query.in(\"category_id\", categories);\n  }\n\n  const { data, error } = await query.returns<Auction_post[]>();\n\n  if (error) throw new Error(error.message);\n\n  return data;\n}\n\nexport const fetchGetCategories = async () => {\n  const { data, error } = await connectSupabase.from(\"category\").select(\"*\");\n\n  if (error) throw new Error(error.message);\n  return data;\n};\n\n/**\n * auction_id로 auction 데이터 호출\n * @param auction_id\n */\nexport const fetchGetAuctionById = async (auction_id: string) => {\n  const { data, error } = await connectSupabase\n    .from(\"auction_post\")\n    .select(\n      `\n      *, auction_images(image_id, image_path),\n      category(category_name)`\n    )\n    .eq(\"auction_id\", auction_id)\n    .returns<Auction_post>()\n    .single();\n  if (error) throw new Error(error.message);\n\n  return data;\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,eAAe,MAAM,mBAAmB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,gBAAgBA,CACpCC,aAAqB,GAAG,EAAE,EAC1BC,UAA2C,EAC3CC,KAAa,GAAG,EAAE,EAClBC,MAAc,GAAG,CAAC,EAClBC,OAAe,GAAG,YAAY,EAC9BC,KAAc,GAAG,KAAK,EACtBC,OAAe,GAAG,EAAE,EACpB;EACAC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;EAE/B,MAAMG,KAAK,GAAGX,eAAe,CAC1BY,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,mDAAmD,CAAC,CAC3DN,KAAK,CAAE,GAAED,OAAQ,EAAC,EAAE;IAAEQ,SAAS,EAAEP;EAAM,CAAC,CAAC;EAE5CL,aAAa,CAACa,IAAI,CAAC,CAAC,KAAK,EAAE,IACzBJ,KAAK,CACFK,IAAI,CAAC,OAAO,EAAG,IAAGd,aAAc,GAAE,CAAC,CACnCc,IAAI,CAAC,SAAS,EAAG,IAAGd,aAAc,GAAE,CAAC;EAE1CM,OAAO,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIJ,KAAK,CAACM,EAAE,CAAC,SAAS,EAAET,OAAO,CAAC;EAErD,IAAIL,UAAU,CAACe,MAAM,GAAG,CAAC,EAAE;IACzBP,KAAK,CAACQ,EAAE,CAAC,aAAa,EAAEhB,UAAU,CAAC;EACrC;EAEA,MAAM;IAAEiB,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMV,KAAK,CAACW,OAAO,CAAiB,CAAC;EAE7D,IAAID,KAAK,EAAE,MAAM,IAAIE,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;EAEzC,OAAOJ,IAAI;AACb;AAEA,OAAO,MAAMK,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAM;IAAEL,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMrB,eAAe,CAACY,IAAI,CAAC,UAAU,CAAC,CAACC,MAAM,CAAC,GAAG,CAAC;EAE1E,IAAIQ,KAAK,EAAE,MAAM,IAAIE,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;EACzC,OAAOJ,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMM,mBAAmB,GAAG,MAAOC,UAAkB,IAAK;EAC/D,MAAM;IAAEP,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMrB,eAAe,CAC1CY,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CACJ;AACP;AACA,8BACI,CAAC,CACAI,EAAE,CAAC,YAAY,EAAEU,UAAU,CAAC,CAC5BL,OAAO,CAAe,CAAC,CACvBM,MAAM,CAAC,CAAC;EACX,IAAIP,KAAK,EAAE,MAAM,IAAIE,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;EAEzC,OAAOJ,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}